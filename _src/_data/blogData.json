[
  {
    "id": "c8678fa2-c5e0-44d0-bdcb-89eacca67c78",
    "title": "Connect Notion to Eleventy",
    "date": "2022-05-01",
    "tags": [
      {
        "id": "a06dd666-45f7-41e9-bac2-72747bb6765b",
        "name": "tutorial",
        "color": "orange"
      },
      {
        "id": "d158591e-b7b5-401c-adf1-2d11e3a284e6",
        "name": "eleventy",
        "color": "brown"
      },
      {
        "id": "96fae8b0-4011-4822-a32a-cda53c6f5971",
        "name": "notion",
        "color": "green"
      },
      {
        "id": "ff472b74-abef-4579-bec6-98e3c27b8721",
        "name": "api",
        "color": "gray"
      },
      {
        "id": "2a9177fa-3638-463b-bd14-8b7411a67d13",
        "name": "nunjucks",
        "color": "default"
      }
    ],
    "content": "\nIn this tutorial I will walk through how to connect a Notion database to a site built with Eleventy.\n\n\n## Background\n\n\nI keep a running list of all the books I read, and publish it over on the [books page](/books) of my site. Recently I moved my book data from a CSV file to a Notion database, and needed a way to connect it to Eleventy so that my books page could be maintained.\n\n\nThankfully this was possible using [Eleventy Fetch](https://www.11ty.dev/docs/plugins/fetch/) and the [Notion API](https://developers.notion.com/reference/intro).\n\n\n## Disclaimer\n\n\nHey! Make sure you are using Notion API version “2020-02-22” or earlier. Significant updates to the API as of version “2022-06-28” made breaking changes to the below approach to fetching data. I hope to have an updated version of this article in the future which will reflect those changes. (-Matt August 21, 2022)\n\n\n## Assumptions\n\n\nYou are familiar with:\n\n1. How to [create a database](https://www.notion.so/help/guides/creating-a-database) and [import a CSV file](https://www.notion.so/help/import-data-into-notion) into Notion.\n2. [Eleventy Data](https://www.11ty.dev/docs/data-global/)\n3. [Async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n4. Using [.env variables](https://nodejs.dev/learn/how-to-read-environment-variables-from-nodejs) in Javascript\n\n## Step 1: Establish a Notion Integration\n\n\nTo access our book database, we need a way to connect to the Notion API.\n\n\n### Create a new integration\n\n\nGo to the [Notion integrations page](https://www.notion.so/my-integrations) and [create a new integration](https://developers.notion.com/docs#step-1-create-an-integration). Be sure to make a note of what you name the Integration. I’m going to call mine ‘mattdecamp.com data’.\n\n\nCopy the **Internal Integration Token**, create a new file in the root of your project called **.env**, and add the token to it.\n\n\n```shell\nNOTION-API-KEY=TheInternalIntegrationToken\n```\n\n\nThis token will be the _key_ to accessing our database.\n\n\n## Step 2: Get the Database ID\n\n\nNow we are going to need the unique ID of our Notion database. Let’s take a look at the url format of a Notion database:\n\n\n```shell\nhttps://www.notion.so/{workspace_name}/{database_id}?v={view_id}\n```\n\n\nFind the part of your database link that corresponds to **{database_id}** and copy that.\n\n\nGo back to your **.env** file and add a new variable.\n\n\n```shell\nNOTION-BOOK-DB=YourDatabaseIDString\n```\n\n\n### Share the Database with our Integration\n\n\nBefore we can fetch the data, we need to ensure our Notion Integration can access the book database. We can do this by sharing our database with the integration in the same way we would a team member or colleague.\n\n\nOn the database page in Notion, click on “Share” in the top-right corner. Click on the input field and a drop-down will appear. Select the integration from the list and click the Invite button. Your integration now has the access it needs to read the database.\n\n\nGreat! Now we have what we need to access the Notion API. Next, let’s figure out how to get our Eleventy site to talk to it.\n\n\n## Step 3: Install Eleventy-Fetch\n\n\nEleventy’s [Fetch plug-in](https://www.11ty.dev/docs/plugins/fetch/) does exactly what you would think and fetches data from a data source, with the added benefit of caching that data for a configurable interval of time.\n\n\nWe are going to use Fetch to connect our site to the Notion API and bring the book data into our site.\n\n\nLet’s install Fetch as a dev dependency in our project.\n\n\n```shell\nnpm i -D @11ty/eleventy-fetch\n```\n\n\nWe’ll need to make sure Fetch can access our environment variables. So let’s install [dotenv](https://www.npmjs.com/package/dotenv) as well.\n\n\n```shell\nnpm i -D dotenv\n```\n\n\nBefore moving ahead, go ahead and create a new file in your project directory called **.cache**. Then add it to your **.gitignore** file. More on what this file is for in the next step.\n\n\n## Step 4: Coding the fetch\n\n\nIn our project’s **_data** folder let’s create a file called **notionBooks.js**. This is where we will write our fetch function. Here’s what we want that function to do:\n\n1. [Query](https://developers.notion.com/reference/post-database-query) our Notion book database.\n2. Conditionally sort the data (more on this in a bit).\n3. Await Fetch based on the options we set.\n4. Have Fetch return the data to us in JSON format.\n\nLet’s create some variables to get started.\n\n\n```javascript\n// Require the Fetch plug-in\nconst EleventyFetch = require(\"@11ty/eleventy-fetch\");\n\n// Grant access to our .env file\nrequire(\"dotenv\").config();\n\n// The Notion Integration Key\nconst NOTION_API_KEY = process.env.NOTION_API_KEY;\n\n// The Book Database ID\nconst NOTION_BOOKS_DB = process.env.NOTION_BOOKS_DB;\n```\n\n\nNow, we create a variable for our API database query. Note here that I am using a template literal so we can include our database ID environment variable in the url string.\n\n\n```javascript\nmodule.exports = async function () {\n  const url = `https://api.notion.com/v1/databases/${NOTION_BOOKS_DB}/query`;\n};\n```\n\n\nNotion’s database query allows the option to both filter and sort our data based on conditions we supply it. Below I am telling Notion to sort the books based on the dateRead property, and in a descending direction.\n\n\nEssentially the book data will be returned to us in the order in which the books were read. The most recently read book will appear first, and so on.\n\n\nYou can set the sort to any property as it applies to your own database. Read more on [sort](https://developers.notion.com/reference/post-database-query-sort) and [filter](https://developers.notion.com/reference/post-database-query-filter) options.\n\n\n```javascript\nmodule.exports = async function () {  \n  const url = `https://api.notion.com/v1/databases/${NOTION_BOOKS_DB}/query`;\n  const sort = {    \n    sorts: [      \n      {        \n        property: \"dateRead\",\n        direction: \"descending\",\n      },\n     ],\n\t };\n};\n```\n\n\n### Fetch Eleventy Fetch!\n\n\nNow we bring in Fetch to do…the fetching! It will take two arguments: the **url** variable and the **options** we want to include.\n\n\nFirst we tell Fetch we want it to store all the cache data in our **.cache** file. Next, we tell it to parse the data as JSON. And then we assign an amount of time until fetch tries to request data again. Here we tell it to wait one day.\n\n\n```javascript\nmodule.exports = async function () {  \n\t// ...url and sort code  \n  let json = await EleventyFetch(url, \n\t\t{    \n\t\t\t\tdirectory: \".cache\",\n\t\t\t\ttype: \"json\",\n\t\t\t\tduration: \"1d\",  \n\t\t});\n};\n```\n\n\nMore on [changing the cache duration](https://www.11ty.dev/docs/plugins/fetch/#change-the-cache-duration).\n\n\n### fetchOptions\n\n\nNow we’ll add three fetchOptions: method, headers, and body.\n\n\nWe need to make sure the method is set to POST to ensure we receive our database data (and not just the structure of the database).\n\n\nFor headers, we input the specific headers the Notion API requires for each call. This includes inputting our Integration token to authorize the API access.\n\n\nThe body option tells Fetch to turn the database JSON object into a string and apply the sort we specified earlier.\n\n\n```javascript\nmodule.exports = async function () {\n\t// ...url and sort code\n\tlet json = await EleventyFetch(url, {\n\t\t\t// directory, type, duration...    \n\t\t\tfetchOptions: {      \n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {        \n\t\t\t\t\tAuthorization: `Bearer ${NOTION_API_KEY}`,        \n\t\t\t\t\t\"Notion-Version\": \"2022-02-22\",\n\t\t\t\t\t\"Content-Type\": \"application/json\",      \n\t\t\t\t},      \n\t\t\t\tbody: JSON.stringify(sort),    \n\t\t\t},  \n\t\t});\n};\n```\n\n\nFinally, the function returns the data.\n\n\n```javascript\nmodule.exports = async function () {\n  // ...other code\n  return {\n    json,\n  };\n};\n```\n\n\nNow the fetch function is complete! Let’s take a look at the all the code put together.\n\n\n```javascript\nrequire(\"dotenv\").config();\nconst EleventyFetch = require(\"@11ty/eleventy-fetch\");\nconst NOTION_API_KEY = process.env.NOTION_API_KEY;\nconst NOTION_BOOKS_DB = process.env.NOTION_BOOKS_DB;\n\nmodule.exports = async function () {\n  const url = `https://api.notion.com/v1/databases/${NOTION_BOOKS_DB}/query`;\n  const sort = {\n    \"sorts\": [\n      {\n        \"property\": \"dateRead\",\n        \"direction\": \"descending\",\n      }\n    ],\n  };\n  let json = await EleventyFetch(url, {\n    directory: \".cache\",\n    duration: \"1d\",\n    type: \"json\",\n    fetchOptions: {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${NOTION_API_KEY}`,\n        \"Notion-Version\": \"2022-02-22\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(sort)\n    },\n  });\n  return {\n    json\n  }\n}\n```\n\n\n## Step 5: Applying the data to our template\n\n\nThe data has been fetched, and now we need to apply it to the book list template. With a little Nunjucks magic we can do just that!\n\n\n```html\n<ul id=\"bookList\">{% raw %}\n  {% for book in notionBooks.json.results %}\n  <li class=\"book\">\n    <div class=\"bookImageContainer\">\n      <a href=\"{{ book.properties.bookBuyUrl.url }}\">\n        <picture>\n          <img\n            class=\"bookImage\"\n            src=\"{{ book.properties.bookImage.url }}\"\n            alt=\"The book cover for {{ book.properties.bookTitle.rich_text[0].text.content }}\"\n            loading=\"lazy\"\n            height=\"240\"\n          />\n        </picture>\n      </a>\n    </div>\n    <div class=\"bookInfo\">\n      <h4 class=\"bookTitle\">{{ book.properties.bookTitle.rich_text[0].text.content }}</h4>\n      {% if book.subTitle %}\n      <p class=\"bookSubTitle\">{{ book.properties.subTitle.rich_text[0].text.content }}</p>\n      {% endif %}\n      <p class=\"bookAuthor\">\n        <em>{{book.properties.bookAuthor.rich_text[0].text.content}}</em>\n      </p>\n      <p class=\"bookDate\">\n        {{book.properties.dateRead.date.start.toString() }}\n      </p>\n    </div>\n  </li>\n  {% endfor %}{% endraw %}\n</ul>\n```\n\n\nCheck out the [Books page](/books) to see the final result.\n\n\nKeep in mind these property values (as with dateRead) are specific to my own book database. Your property values will certainly differ.\n\n\nI recommend reading up on the Notion [property value object](https://developers.notion.com/reference/property-value-object) to get an idea of how they are structured and the keys each property value contains.\n\n\n### Deployment and Environment Variables\n\n\nFor security purposes, we never want our environment variables pushed to the project repository. However, this database fetch will not work without them.\n\n\nSo, how do we get around this?\n\n\nWell, Netlify (where I deploy my site) allows you to [store your environment variables](https://docs.netlify.com/configure-builds/environment-variables/) under your site’s Deploy Settings. This keeps them safe and still accessible at build time.\n\n\nThanks for reading and happy coding! 🏄\n\n"
  },
  {
    "id": "d929ebb4-f34c-48cc-8b9d-b16056fae7ac",
    "title": "Scroll Snap in a Snap",
    "date": "2022-04-05",
    "tags": [
      {
        "id": "8d267792-21d4-4c0f-9593-c529d03f11f3",
        "name": "how-to",
        "color": "red"
      },
      {
        "id": "0e2abeb5-f9f3-4c6b-83e8-194f4eba20b2",
        "name": "scroll snap",
        "color": "blue"
      },
      {
        "id": "a06dd666-45f7-41e9-bac2-72747bb6765b",
        "name": "tutorial",
        "color": "orange"
      },
      {
        "id": "cb445dda-c085-4f22-9999-a37196e86cae",
        "name": "css",
        "color": "pink"
      }
    ],
    "content": "\nScroll snap is a handy viewport navigation effect that locks focus on a page element. Elements with the scroll effect applied “snap” into view.\n\n\nScroll snap works along both the y and x axes of the viewport. Often, you will see it applied to a series of cards, or used to bring focus onto specific sections of a page.\n\n\n## Getting Started\n\n\nTo get up and running with Scroll Snap we will need two properties: `scroll-snap-type` and `snap-scroll-align`.\n\n\n[ Check out the full list of Scroll Snap properties on [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap). ]\n\n\nLet’s say we have a stack of slides we want to snap into place along the y-axis of the viewport.\n\n\nFirst, we add the `scroll-snap-type` property to the container element.\n\n\n```css\n#container {  scroll-snap-type: y mandatory;}\n```\n\n\nWith this property we have a required first value `y`, followed by an optional second value `mandatory`.\n\n\nWith `y` we are saying the container element can only snap along its y-axis. `mandatory` ensures that whenever the scroll action completes, the browser will snap to the nearest element along the axis.\n\n\nNext, we need to add `scroll-snap-align` to the elements we want to snap.\n\n\n```css\n.slide {  scroll-snap-align: start;}\n```\n\n\nHere we are saying two things: 1. Snap all the child elements with the `slide` class applied. 2. Snap to the `start` of each slide element.\n\n\nLet’s see this in action:\n\n\nSee the Pen [ Scroll Snap Slides: y mandatory | align start](https://codepen.io/mattdecamp/pen/mdrKgjP) by Matt DeCamp ([@mattdecamp](https://codepen.io/mattdecamp)) on [CodePen](https://codepen.io/).\n\n\nSomething to note here: We could have snapped the slides to their `center` or `end`. But, with these full viewport cards, it’s hard to see the difference.\n\n\nLet’s make it easier to see with a new example which snaps cards to their `end`.\n\n\nSee the Pen [ Scroll Snap Slides: y mandatory | align start](https://codepen.io/mattdecamp/pen/OJzzLyp) by Matt DeCamp ([@mattdecamp](https://codepen.io/mattdecamp)) on [CodePen](https://codepen.io/).\n\n\nOpen up the demo yourself, substitute `start` and `center` into the `snap-scroll-align` property, and see how that affects the cards.\n\n\n## Mandatory vs. Proximity\n\n\nThe `scroll-snap-type` property can take either `mandatory` or `proximity` as its second value. So far we’ve only touched on `mandatory`. Think of it as the stricter of the two. No matter what the snap aligns to, you will see that visually dramatic snap effect.\n\n\n`proximity` on the other hand is a “softer” snap; one that won’t take effect until the scroll action is much closer to the `scroll-snap-align` point.\n\n\nLet’s take a look at the difference. And be sure to scroll slowly to make sure you’re seeing the effect.\n\n\n<figure>\n    <iframe height=\"600\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll Snap Slides: x mandatory | center\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" src=\"https://codepen.io/mattdecamp/pen/gOooYKx\"></iframe>\n    <figcaption></figcaption>\n  </figure>\n\n\nSee the Pen [ Scroll Snap Slides: Small Slides | y mandatory | align end](https://codepen.io/mattdecamp/pen/gOooYKx) by Matt DeCamp ([@mattdecamp](https://codepen.io/mattdecamp)) on [CodePen](https://codepen.io/).\n\n\n### Horizontal Scroll\n\n\nLastly, let’s take a quick look at what a scroll along the x-axis looks like. First let’s apply our properties.\n\n\n```css\n#container {  scroll-snap-type: x mandatory}.slide {  scroll-snap-align: center;}\n```\n\n\n<figure>\n    <iframe height=\"600\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll Snap Slides: x mandatory | center\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" src=\"https://codepen.io/mattdecamp/pen/yLpXQdK\"></iframe>\n    <figcaption></figcaption>\n  </figure>\n\n\nSee the Pen [ Scroll Snap Slides - Horizontal](https://codepen.io/mattdecamp/pen/yLpXQdK) by Matt DeCamp ([@mattdecamp](https://codepen.io/mattdecamp)) on [CodePen](https://codepen.io/).\n\n\nPretty much the same behavior as in our first example, only occuring along the screen’s horizontal (x) axis.\n\n\n## Wrapping Up\n\n\nAt it’s most basic two property setting, scroll-snap is pretty easy to set up, eh?\n\n\nBut it _can_ be more involved (and you can get much more specific with your settings). I encourage you to take look at [all the scroll-snap properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap) and consider how they could useful to you in your next project.\n\n\nThanks for reading, and happy coding!\n\n"
  }
]
